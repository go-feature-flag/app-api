basePath: /
definitions:
  model.FeatureFlag:
    properties:
      LastModifiedBy:
        type: string
      bucketingKey:
        description: BucketingKey defines a source for a dynamic targeting key
        type: string
      createdDate:
        type: string
      defaultRule:
        allOf:
        - $ref: '#/definitions/model.Rule'
        description: |-
          DefaultRule is the rule applied after checking that any other rules
          matched the user.
      description:
        type: string
      disable:
        description: Disable is true if the flag is disabled.
        type: boolean
      id:
        type: string
      lastUpdatedDate:
        type: string
      metadata:
        additionalProperties: true
        description: Metadata is a field containing information about your flag such
          as an issue tracker link, a description, etc ...
        type: object
      name:
        type: string
      targeting:
        description: |-
          Rules is the list of Rule for this flag.
          This an optional field.
        items:
          $ref: '#/definitions/model.Rule'
        type: array
      trackEvents:
        description: |-
          TrackEvents is false if you don't want to export the data in your data exporter.
          Default value is true
        type: boolean
      type:
        $ref: '#/definitions/model.FlagType'
      variations:
        additionalProperties: {}
        description: |-
          Variations are all the variations available for this flag. The minimum is 2 variations and, we don't have any max
          limit except if the variationValue is a bool, the max is 2.
        type: object
      version:
        description: |-
          Version (optional) This field contains the version of the flag.
          The version is manually managed when you configure your flags and, it is used to display the information
          in the notifications and data collection.
        type: string
    type: object
  model.FeatureFlagStatusUpdate:
    properties:
      disable:
        type: boolean
    type: object
  model.FlagType:
    enum:
    - boolean
    - string
    - integer
    - double
    - json
    type: string
    x-enum-varnames:
    - FlagTypeBoolean
    - FlagTypeString
    - FlagTypeInteger
    - FlagTypeDouble
    - FlagTypeJSON
  model.HTTPError:
    properties:
      code:
        example: 500
        type: integer
      errorDetails:
        example: An error occurred
        type: string
    type: object
  model.ProgressiveRollout:
    properties:
      end:
        allOf:
        - $ref: '#/definitions/model.ProgressiveRolloutStep'
        description: End contains what describes the end status of the rollout.
      initial:
        allOf:
        - $ref: '#/definitions/model.ProgressiveRolloutStep'
        description: Initial contains a description of the initial state of the rollout.
    type: object
  model.ProgressiveRolloutStep:
    properties:
      date:
        description: Date is the time it starts or ends.
        type: string
      percentage:
        description: Percentage is the percentage (initial or end) for the progressive
          rollout
        type: number
      variation:
        description: Variation - name of the variation for this step
        type: string
    type: object
  model.Rule:
    properties:
      disable:
        description: Disable indicates that this rule is disabled.
        type: boolean
      id:
        description: Id of the rule
        type: string
      name:
        description: |-
          Name is the name of the rule, this field is mandatory if you want
          to update the rule during scheduled rollout
        type: string
      percentage:
        additionalProperties:
          type: number
        description: |-
          Percentages represents the percentage we should give to each variation.
          example: variationA = 10%, variationB = 80%, variationC = 10%
        type: object
      progressiveRollout:
        allOf:
        - $ref: '#/definitions/model.ProgressiveRollout'
        description: |-
          ProgressiveRollout is your struct to configure a progressive rollout deployment of your flag.
          It will allow you to ramp up the percentage of your flag over time.
          You can decide at which percentage you starts with and at what percentage you ends with in your release ramp.
          Before the start date we will serve the initial percentage and, after we will serve the end percentage.
      query:
        description: Query represents an antlr query in the nikunjy/rules format
        type: string
      variation:
        description: |-
          VariationResult represents the variation name to use if the rule apply for the user.
          In case we have a percentage field in the config VariationResult is ignored
        type: string
    type: object
info:
  contact:
    email: contact@gofeatureflag.org
    name: GO feature flag configuration API
    url: https://gofeatureflag.org
  description: |
    # Introduction

    This API is documented in **OpenAPI format** and describe the REST API of the **`GO Feature Flag configuration API`**.

    The goal of this micro-service is to offer a way to configure your feature flags in a more centralized and convenient way than a file.
  license:
    name: MIT
    url: https://github.com/thomaspoignant/go-feature-flag/blob/main/LICENSE
  title: GO Feature Flag - configuration API
  x-logo:
    url: https://raw.githubusercontent.com/thomaspoignant/go-feature-flag/main/logo_128.png
paths:
  /v1/flags:
    get:
      description: GET request to get all the flags available.
      responses:
        "200":
          description: Success
          schema:
            items:
              $ref: '#/definitions/model.FeatureFlag'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Return all the flags available
      tags:
      - Feature Flag management API
    post:
      description: |-
        POST will insert in the database the new feature flag with all his properties,
        and it will add all the associated rules too.
      parameters:
      - description: Payload which represents the flag to insert
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.FeatureFlag'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.FeatureFlag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "409":
          description: Conflict - when trying to insert a flag with a name that already
            exists
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Create a new feature flag with the given configuration.
      tags:
      - Feature Flag management API
  /v1/flags/{id}:
    delete:
      description: DELETE - Delete the flag with the given ID.
      parameters:
      - description: ID of the feature flag
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.FeatureFlag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Delete the flag with the given ID
      tags:
      - Feature Flag management API
    get:
      description: GET all the information about a flag with a specific .
      parameters:
      - description: ID of the feature flag
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.FeatureFlag'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Return all the information about a flag
      tags:
      - Feature Flag management API
    put:
      description: PUT - Updates the flag with the given ID with what is in the payload.
        It will replace completely the feature flag.
      parameters:
      - description: ID of the feature flag
        in: path
        name: id
        required: true
        type: string
      - description: Payload which represents the flag to update
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.FeatureFlag'
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.FeatureFlag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Updates the flag with the given ID
      tags:
      - Feature Flag management API
  /v1/flags/{id}/status:
    patch:
      description: PATCH - Update the status of the flag with the given ID
      parameters:
      - description: ID of the feature flag
        in: path
        name: id
        required: true
        type: string
      - description: The patch query to update the flag status
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.FeatureFlagStatusUpdate'
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.FeatureFlag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.HTTPError'
      summary: Update the status of the flag with the given ID
      tags:
      - Feature Flag management API
swagger: "2.0"
